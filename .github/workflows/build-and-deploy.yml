name: Java CI

on:
  push:
    branches:
      - "**"
      - "!main"
      - "!develop"
  pull_request:
    types:
      - closed
    branches:
      - "main"
      - "develop"
    paths:
      - "**/src/main/**"
      - "**pom.xml"
      - "Dockerfile"
      - ".github/workflows/build-and-deploy.yml"

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
        matrix: ${{ steps.setmatrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: Set up JDK 11
        uses: actions/setup-java@1df8dbefe2a8cbc99770194893dd902763bee34b
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with Maven
        run: >
          mvn package -B -DskipTests=true 
          -DmavenVersionOption='Default'
          -DmavenOptions='-Xmx3072m' 
          -DmavenAuthenticateFeed=false
          -DeffectivePomSkip=true 
          -DsonarQubeRunAnalysis=false

      - name: Archive artifacts
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: app-jar
          path: |
            target/*.jar

      - name: Set Dynamic Env Matrix
        id: setmatrix
        run: |
          if [ ${{ github.event.pull_request.base.ref == 'main' }}} == true ]; then 
            matrixStringifiedObject="{\"include\":[{\"environment\":\"uat\", \"env_short\": \"u\"},{\"environment\":\"prod\", \"env_short\": \"p\"}]}"
          elif [ ${{ github.event.pull_request.base.ref == 'develop' }} == true ]; then
            matrixStringifiedObject="{\"include\":[{\"environment\":\"dev\", \"env_short\": \"d\"}]}"        
          else
            matrixStringifiedObject=""
          fi
          
          echo "matrix=$matrixStringifiedObject" >> $GITHUB_OUTPUT          
      
  deploy:
    name: "Deploy on ECS"
    if: ${{ needs.build.outputs.matrix != '' }}
    needs: build
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    strategy:
        matrix: ${{ fromJson(needs.build.outputs.matrix) }}
         
    continue-on-error: false
    environment: ${{ matrix.environment }}
    env:
      AWS_REGION: eu-south-1

    steps:
      - name: Release
        if: ${{ matrix.environment == 'prod' }}
        id: release
        # from https://github.com/cycjimmy/semantic-release-action/commits/main
        uses: cycjimmy/semantic-release-action@bdd914ff2423e2792c73475f11e8da603182f32d
        with:
          semantic_version: 18.0.0
          extra_plugins: |
            @semantic-release/release-notes-generator@10.0.3
            @semantic-release/git@10.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: app-jar
          path: target

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@261a7de32bda11ba01f4d75c4ed6caf3739e54be

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tokenizer-${{ matrix.env_short }}-ecr
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
          --task-definition tokenizer-${{ matrix.env_short }}-task-tokenizer \
          --query taskDefinition > ./task-definition.json
          echo $(cat ./task-definition.json | jq 'del(
                  .taskDefinitionArn,
                  .requiresAttributes,
                  .compatibilities,
                  .revision,
                  .status,
                  .registeredAt,
                  .registeredBy
              )') > ./task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@61b0c00c3743b70987a73a1faf577f0d167d1574
        with:
          task-definition: ./task-definition.json
          container-name: tokenizer-${{ matrix.env_short }}-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: tokenizer-${{ matrix.env_short }}-service-tokenizer
          cluster: tokenizer-${{ matrix.env_short }}-ecs-cluster
          wait-for-service-stability: true