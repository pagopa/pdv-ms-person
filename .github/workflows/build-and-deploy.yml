name: Java CI

on:
  push:
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.release.outputs.new_release_published }}
      new_release_version: ${{ steps.release.outputs.new_release_version }}

    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: Set up JDK 17
        uses: actions/setup-java@1df8dbefe2a8cbc99770194893dd902763bee34b
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build with Maven
        run: >
          mvn package -B -DskipTests=true 
          -DmavenVersionOption='Default'
          -DmavenOptions='-Xmx3072m' 
          -DmavenAuthenticateFeed=false
          -DeffectivePomSkip=true 
          -DsonarQubeRunAnalysis=false

      - name: Release
        id: release
        uses: cycjimmy/semantic-release-action@8f6ceb9d5aae5578b1dcda6af00008235204e7fa
        with:
          semantic_version: 18.0.0
          extra_plugins: |
            @semantic-release/release-notes-generator@10.0.3
            @semantic-release/git@10.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-jar
          path: |
            target/*.jar

  deploy:
    name: "Deploy on ECS"
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: eu-south-1
    if: needs.build.outputs.new_release_published == 'true'
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - uses: actions/download-artifact@master
        with:
          name: app-jar
          path: target
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          role-to-assume: arn:aws:iam::189790882570:role/GitHubDeployECS
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Get Account id
        run: |
          aws sts get-caller-identity --query Account --output text
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@261a7de32bda11ba01f4d75c4ed6caf3739e54be

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pdv-u-person
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
          --task-definition pdv-u-task-person \
          --query taskDefinition > ./task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@61b0c00c3743b70987a73a1faf577f0d167d1574
        with:
          task-definition: ./task-definition.json
          container-name: pdv-u-container
          image: ${{ steps.build-image.outputs.image }}:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: pdv-u-service-person
          cluster: pdv-u-ecs-cluster
          wait-for-service-stability: true