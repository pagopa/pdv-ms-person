{
  "openapi" : "3.0.1",
  "info" : {
    "description" : "People API documentation",
    "title" : "pdv-ms-person",
    "version" : "1.0-SNAPSHOT"
  },
  "servers" : [ {
    "url" : "http://localhost",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/people/id" : {
      "get" : {
        "description" : "Find an existing person id given its namespaced id",
        "operationId" : "findIdByNamespacedId",
        "parameters" : [ {
          "description" : "Person namespaced id",
          "in" : "query",
          "name" : "namespacedId",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "description" : "Namespace",
          "in" : "query",
          "name" : "namespace",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonId"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Bad Request"
          },
          "429" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Too Many Requests"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Find person id",
        "tags" : [ "person" ]
      }
    },
    "/people/{id}" : {
      "delete" : {
        "description" : "Delete person by its internal id",
        "operationId" : "deletePerson",
        "parameters" : [ {
          "description" : "Person internal id",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Bad Request"
          },
          "429" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Too Many Requests"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Delete person",
        "tags" : [ "person" ]
      },
      "get" : {
        "description" : "Retrieve the person by its id, if a namespace is present then the id will be interpreted as namespaced id, otherwise as internal (global) id",
        "operationId" : "findById",
        "parameters" : [ {
          "description" : "Person internal id",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "description" : "Indicates if the Person is namespaced or not",
          "in" : "query",
          "name" : "isNamespaced",
          "required" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "description" : "Namespace",
          "in" : "query",
          "name" : "namespace",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonResource"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Bad Request"
          },
          "429" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Too Many Requests"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Find person",
        "tags" : [ "person" ]
      },
      "patch" : {
        "description" : "Update the given subset fields of an existing person by its internal (global) id, if not present create a new one",
        "operationId" : "save",
        "parameters" : [ {
          "description" : "Person internal id",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SavePersonDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Bad Request"
          },
          "409" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Conflict"
          },
          "429" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Too Many Requests"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Upsert person details",
        "tags" : [ "person" ]
      }
    },
    "/people/{id}/namespace/{namespace}" : {
      "delete" : {
        "description" : "Delete person namespace by internal (global) id",
        "operationId" : "deletePersonNamespace",
        "parameters" : [ {
          "description" : "Person internal id",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "description" : "Namespace",
          "in" : "path",
          "name" : "namespace",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Bad Request"
          },
          "429" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Too Many Requests"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Delete person namespace",
        "tags" : [ "person" ]
      },
      "put" : {
        "description" : "Create a new person namespace given its internal (global) id, if already exists do nothing",
        "operationId" : "saveNamespacedId",
        "parameters" : [ {
          "description" : "Person internal id",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "description" : "Namespace",
          "in" : "path",
          "name" : "namespace",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SavePersonNamespaceDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Bad Request"
          },
          "429" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Too Many Requests"
          },
          "500" : {
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Upsert person namespace",
        "tags" : [ "person" ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "BirthDateCertifiableSchema" : {
        "type" : "object",
        "description" : "Person date of birth",
        "properties" : {
          "certification" : {
            "type" : "string",
            "description" : "Certified source of information"
          },
          "value" : {
            "type" : "string",
            "description" : "Field value",
            "format" : "date"
          }
        },
        "required" : [ "certification", "value" ]
      },
      "EmailCertifiableSchema" : {
        "type" : "object",
        "description" : "Person email",
        "properties" : {
          "certification" : {
            "type" : "string",
            "description" : "Certified source of information"
          },
          "value" : {
            "type" : "string",
            "description" : "Field value"
          }
        },
        "required" : [ "certification", "value" ]
      },
      "FamilyNameCertifiableSchema" : {
        "type" : "object",
        "description" : "Person family name",
        "properties" : {
          "certification" : {
            "type" : "string",
            "description" : "Certified source of information"
          },
          "value" : {
            "type" : "string",
            "description" : "Field value"
          }
        },
        "required" : [ "certification", "value" ]
      },
      "InvalidParam" : {
        "required" : [ "name", "reason" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Invalid parameter name."
          },
          "reason" : {
            "type" : "string",
            "description" : "Invalid parameter reason."
          }
        },
        "description" : "A list of invalid parameters details."
      },
      "MobilePhoneCertifiableSchema" : {
        "type" : "object",
        "description" : "Person work mobile phone number",
        "properties" : {
          "certification" : {
            "type" : "string",
            "description" : "Certified source of information"
          },
          "value" : {
            "type" : "string",
            "description" : "Field value"
          }
        },
        "required" : [ "certification", "value" ]
      },
      "NameCertifiableSchema" : {
        "type" : "object",
        "description" : "Person name",
        "properties" : {
          "certification" : {
            "type" : "string",
            "description" : "Certified source of information"
          },
          "value" : {
            "type" : "string",
            "description" : "Field value"
          }
        },
        "required" : [ "certification", "value" ]
      },
      "PersonId" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Person internal id",
            "format" : "uuid"
          }
        }
      },
      "PersonResource" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "birthDate" : {
            "$ref" : "#/components/schemas/BirthDateCertifiableSchema"
          },
          "email" : {
            "$ref" : "#/components/schemas/EmailCertifiableSchema"
          },
          "familyName" : {
            "$ref" : "#/components/schemas/FamilyNameCertifiableSchema"
          },
          "id" : {
            "type" : "string",
            "description" : "Person internal id",
            "format" : "uuid"
          },
          "name" : {
            "$ref" : "#/components/schemas/NameCertifiableSchema"
          },
          "workContacts" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/WorkContactResource"
            },
            "description" : "Person work contacts"
          }
        }
      },
      "Problem" : {
        "required" : [ "status", "title" ],
        "type" : "object",
        "properties" : {
          "detail" : {
            "type" : "string",
            "description" : "Human-readable description of this specific problem."
          },
          "instance" : {
            "type" : "string",
            "description" : "A URI that describes where the problem occurred."
          },
          "invalidParams" : {
            "type" : "array",
            "description" : "A list of invalid parameters details.",
            "items" : {
              "$ref" : "#/components/schemas/InvalidParam"
            }
          },
          "status" : {
            "maximum" : 599,
            "minimum" : 100,
            "type" : "integer",
            "description" : "The HTTP status code.",
            "format" : "int32",
            "example" : 500
          },
          "title" : {
            "type" : "string",
            "description" : "Short human-readable summary of the problem."
          },
          "type" : {
            "type" : "string",
            "description" : "A URL to a page with more details regarding the problem."
          }
        },
        "description" : "A \"problem detail\" as a way to carry machine-readable details of errors (https://datatracker.ietf.org/doc/html/rfc7807)"
      },
      "SavePersonDto" : {
        "type" : "object",
        "properties" : {
          "birthDate" : {
            "$ref" : "#/components/schemas/BirthDateCertifiableSchema"
          },
          "email" : {
            "$ref" : "#/components/schemas/EmailCertifiableSchema"
          },
          "familyName" : {
            "$ref" : "#/components/schemas/FamilyNameCertifiableSchema"
          },
          "name" : {
            "$ref" : "#/components/schemas/NameCertifiableSchema"
          },
          "workContacts" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/WorkContactResource"
            },
            "description" : "Person work contacts"
          }
        }
      },
      "SavePersonNamespaceDto" : {
        "required" : [ "namespacedId" ],
        "type" : "object",
        "properties" : {
          "namespacedId" : {
            "type" : "string",
            "description" : "Person namespaced id",
            "format" : "uuid"
          }
        }
      },
      "TelephoneCertifiableSchema" : {
        "type" : "object",
        "description" : "Person work telephone number",
        "properties" : {
          "certification" : {
            "type" : "string",
            "description" : "Certified source of information"
          },
          "value" : {
            "type" : "string",
            "description" : "Field value"
          }
        },
        "required" : [ "certification", "value" ]
      },
      "WorkContactResource" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "$ref" : "#/components/schemas/EmailCertifiableSchema"
          },
          "mobilePhone" : {
            "$ref" : "#/components/schemas/MobilePhoneCertifiableSchema"
          },
          "telephone" : {
            "$ref" : "#/components/schemas/TelephoneCertifiableSchema"
          }
        },
        "description" : "Person work contacts"
      }
    }
  }
}